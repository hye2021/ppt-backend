plugins {
    id 'java'

    id 'org.springframework.boot' version '3.4.5'
    /*
        - spring boot 어플리케이션을 빌드하고 패키징 하는데 사용되는 gradle 플러그인
        - gradle 빌드 스크립트에서 spring boot와 관련된 설정을 간편하게 구성할 수 있음
        - 제공하는 task: bootRun, bootJar, bootWar, bootBuildImage
    * */

    id 'io.spring.dependency-management' version '1.1.7'
    /*
    - 의존성 관리를 위해 사용되는 플러그인
    - 제공하는 task: dependencyUpdates, dependencyManagement(Maven BOM 파일 생성)
    - Maven BOM (Bill of Materials): 의존성 관리를 위한 파일
    * */

    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.example' // group: 프로젝트의 그룹명을 설정하는 속성
version = '0.0.1-SNAPSHOT' // version: 프로젝트의 버전 (Major.Minor.Patch)

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21) // 자바의 버전. JDK21사용
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories { // 사용할 라이브러리들이 저장되어 있는 Maven Repository의 위치를 지정
    mavenCentral() // gradle에서 제공하는 기본적인 라이브러리 저장소인 Maven Central Repository를 사용함
    maven { url 'https://repo1.maven.org/maven2' }
}

ext { // 전역 변수처럼 사용할 수 있는 값
    set('snippetsDir', file("build/generated-snippets")) // REST Docs를 생성할 때, 이 디렉토리에 스니펫 파일들이 생성됨
}

// 의존성 설정하기
dependencies {
    /* 키워드
        - implementation: 컴파일과 런타임 모두에서 사용되는 일반적인 의존성
        - compileOnly: 컴파일 시에만 필요한 의존성. 런타임에는 포함되지 않음 (어노테이션 처리기 등)
        - developmentOnly: 개발 중에만 사용하는 라이브러리. 실제 배포시에는 포함되지 않음 (개발 편의 도구)
        - annotationProcessor: 어노테이션 처리기 지정 (애노테이션을 자동으로 처리해주는 라이브러리(Lombok 등)를 사용할 때)
    * */
//    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // 웹 개발에 필요한 의존성을 관리해주는 starter 프로젝트
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // OAuth2 연동 로그인 & Spring Security & JWT
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5' // JWT
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // JPA & DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2' // 테스트용 DB (또는 mysql, postgresql 등)
    implementation 'mysql:mysql-connector-j:8.0.33'
}

// 테스트 태스크 설정
tasks.named('test') {
    // 테스트 결과로 생성된 REST Docs 스니펫 디렉토리를 outputs로 지정
    outputs.dir snippetsDir

    // JUnit5(Platform) 기반으로 테스트를 실행하도록 설정
    useJUnitPlatform()
}

// asciidoctor 태스크 설정 (문서 생성기)
// asciidoctor 실행 전에 반드시 test 태스크가 먼저 실행되도록 의존성 지정
// asciidoctor 입력값으로 snippets 디렉터리 설정 (test에서 생성된 스니펫 사용)
tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}
